// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2023 14:11:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          LAB3_210104004228
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LAB3_210104004228_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in1;
reg in2;
reg in3;
reg in4;
reg select;
// wires                                               
wire out;

// assign statements (if any)                          
LAB3_210104004228 i1 (
// port map - connection between master ports and signals/registers   
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.out(out),
	.select(select)
);
initial 
begin 
#1000000 $finish;
end 

// in1
always
begin
	in1 = 1'b0;
	in1 = #10000 1'b1;
	#10000;
end 

// in2
always
begin
	in2 = 1'b0;
	in2 = #20000 1'b1;
	#20000;
end 

// in3
initial
begin
	repeat(12)
	begin
		in3 = 1'b0;
		in3 = #40000 1'b1;
		# 40000;
	end
	in3 = 1'b0;
end 

// in4
initial
begin
	repeat(6)
	begin
		in4 = 1'b0;
		in4 = #80000 1'b1;
		# 80000;
	end
	in4 = 1'b0;
end 

// select
initial
begin
	repeat(3)
	begin
		select = 1'b0;
		select = #160000 1'b1;
		# 160000;
	end
	select = 1'b0;
end 
endmodule

