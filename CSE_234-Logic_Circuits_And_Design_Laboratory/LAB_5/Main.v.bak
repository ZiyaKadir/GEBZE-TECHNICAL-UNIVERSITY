module MUX (
  input [4:0] input1,
  input [4:0] input2,
  input [4:0] input3,
  input [4:0] input4,
  input [1:0] select,
  output reg [4:0] output
);
  always @* begin
    case (select)
      2'b00: output = input1;
      2'b01: output = input2;
      2'b10: output = input3;
      2'b11: output = input4;
    endcase
  end
endmodule

module Adder (
  input [4:0] input1,
  input [4:0] input2,
  output [4:0] sum
);
  assign sum = input1 + input2;
endmodule

module Main (
  input [4:0] sum,
  input sw1,
  input sw2,
  input load,
  output reg [4:0] led
);
  wire [4:0] xor_output;
  wire [4:0] adder_output;
  wire [1:0] select;

  // Instantiate modules
  MUX mux (
    .input1(sum),
    .input2(xor_output),
    .input3(adder_output),
    .input4(sum),
    .select({sw2, sw1}),
    .output(led)
  );

  Adder adder (
    .input1(sum),
    .input2(register_out),
    .sum(adder_output)
  );

  // Other signals and logic here

endmodule
