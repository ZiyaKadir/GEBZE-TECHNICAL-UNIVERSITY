module carry_out_generator(
	
	output [3:0] Carry_out,
	
	input [3:0] in_0,
	input [3:0] in_1,

	input carry_in
);


	or or_0(p0, in_0[0], in_1[0]);
	or or_1(p1, in_0[1], in_1[1]);
	or or_2(p2, in_0[2], in_1[2]);
	or or_3(p3, in_0[3], in_1[3]);
	
	and and_0(g0, in_0[0], in_1[0]);
	and and_1(g1, in_0[1], in_1[1]);
	and and_2(g2, in_0[2], in_1[2]);
	and and_3(g3, in_0[3], in_1[3]);
	
	////////////////////////////////////////////////////////////////////////////


	and and_p0_c0_gate(and_p0_c0, p0, carry_in); // p0.c0
	
	and and_p1_p0_c0_gate(and_p1_p0_c0, p1, p0, carry_in); // p1.p0.c0
	
	and and_p2_p1_p0_c0_gate(and_p2_p1_p0_c0, p2, p1, p0, carry_in); // p2.p1.p0.c0
	
	and and_p3_p2_p1_p0_c0_gate(and_p3_p2_p1_p0_c0, p3, p2, p1, p0, carry_in); // p3.p2.p1.p0.c0
	
	///////////////////////////////////////////////////////////////////////////
	
	and and_p1_g0_gate(and_p1_g0, p1, g0); // p1.g0
	
	and and_p2_p1_g0_gate(and_p2_p1_g0, p2, p1, g0); // p2.p1.g0
	
	and and_p3_p2_p1_g0_gate(and_p3_p2_p1_g0, p3,p2, p1, g0); // p3.p2.p1.g0

	///////////////////////////////////////////////////////////////////////////
	
	and and_p2_g1_gate(and_p2_g1, p2, g1); // p2.g1
	
	and and_p3_p2_g1_gate(and_p3_p2_g1, p2, g1); // p3.p2.g1
	
	///////////////////////////////////////////////////////////////////////////
	
	and and_p3_g2_gate(and_p3_g2, p3, g2); // p3.g2	
	
	///////////////////////////////////////////////////////////////////////////
	
	
	or c1_gate(Carry_out[0], g0, and_p0_c0);
	
	or c2_gate(Carry_out[1], g1, and_p1_g0, and_p1_p0_c0);
	
	or c3_gate(Carry_out[2], g2, and_p2_g1, and_p2_p1_g0, and_p2_p1_p0_c0);
	
	or c4_gate(Carry_out[3], g3, and_p3_g2, and_p3_p2_g1, and_p3_p2_p1_g0, and_p3_p2_p1_p0_c0);
	
	


endmodule 